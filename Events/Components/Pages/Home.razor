@page "/"

@using System.Threading.Tasks
@using System.Linq
@using MudBlazor
@inject EventsService EventsService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
    <MudPaper Class="pa-6" Elevation="4">
        <MudGrid Spacing="4">
            <!-- Page Header -->
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Class="mb-4">Event Dashboard</MudText>
            </MudItem>

            <!-- Action Buttons -->
            <MudItem xs="12" Class="d-flex flex-column flex-sm-row justify-space-between align-center gap-2">
                <div class="d-flex flex-column flex-sm-row gap-2">
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary"
                               OnClick="ShowTerminalAvailabilityForm" StartIcon="@Icons.Material.Filled.DateRange">
                        Check Terminal Availability
                    </MudButton>
                    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Secondary"
                               OnClick="ShowAddEventForm" StartIcon="@Icons.Material.Filled.Add">
                        Add New Event
                    </MudButton>
                </div>
                <MudCheckBox T="bool"
                             ValueChanged="FilterEventsByArchiveStatus"
                             Label="Show Archived Events" Color="Color.Primary" />
            </MudItem>

            <!-- Data Grid -->
            <MudItem xs="12">
                <MudDataGrid T="vwEvent" @ref="_dataGrid"
                             Loading="_isLoading" ReadOnly="true"
                             Bordered="true" Dense="true" Striped="true" Hover="true"
                             Filterable="true" Groupable="true"
                             ServerData="ServerReload" Class="mt-2" >
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Results</MudText>
                        <MudSpacer />
                        <MudTextField T="string" ValueChanged="OnSearch" Placeholder="Search"
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                      IconSize="Size.Medium" Class="mt-0" />
                    </ToolBarContent>
                    <NoRecordsContent>
                        <MudAlert Severity="Severity.Info" Class="my-2">
                            @(_showArchivedEvents
                                ? "No archived events found"
                                : "No events found. Click \"Add New Event\" to create your first event.")
                        </MudAlert>
                    </NoRecordsContent>
                    <Columns>
                        <HierarchyColumn T="vwEvent" />
                        <PropertyColumn Property="x => x.Id" Hidden="true"/>
                        <PropertyColumn Property="x => x.Reference" Title="Reference" Sortable="true"/>
                        <PropertyColumn Property="x => x.Deal_Name" Title="Deal Name" Sortable="true"/>
                        <PropertyColumn Property="x => x.Event_Name" Title="Event" Sortable="true"/>
                        <PropertyColumn Property="x => x.Deal_Status" Title="Deal Status" Sortable="true"/>
                        <PropertyColumn Property="x => x.Hardware_Out_Date" Title="Hardware Out Date" Format="dd/MM/yyyy" Sortable="true"/>
                        <PropertyColumn Property="x => x.Start_Date" Title="Start Date" Format="dd/MM/yyyy" Sortable="true"/>
                        <PropertyColumn Property="x => x.End_Date" Title="End Date" Format="dd/MM/yyyy" Sortable="true"/>
                        <PropertyColumn Property="x => x.Hardware_In_Date" Title="Hardware In Date" Format="dd/MM/yyyy" Sortable="true"/>
                        <PropertyColumn Property="x => x.Expected_Return_Date" Title="Expected Return Date" Format="dd/MM/yyyy" Sortable="true"/>
                        <PropertyColumn Property="x => x.Days" Title="Days" Sortable="true"/>
                        <PropertyColumn Property="x => x.Expected_Terminals" Title="Expected Terminals" Sortable="true"/>
                        <PropertyColumn Property="x => x.Confirmed_Terminals" Title="Confirmed Terminals" Sortable="true"/>
                        <TemplateColumn Title="Actions" StickyRight="true">
                            <CellTemplate>
                                <div class="d-flex gap-1">
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                                       Color="Color.Primary" OnClick="@(() => EditEvent(context.Item.Id))"/>
                                    </MudTooltip>
                                    <MudTooltip Text="@(_showArchivedEvents ? "Un-Archive" : "Archive")">
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Archive"
                                                       Color="Color.Warning" OnClick="@(() => ConfirmArchive(context.Item.Id))"/>
                                    </MudTooltip>
                                    @if (_showArchivedEvents)
                                    {
                                        <MudTooltip Text="Delete Event">
                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete"
                                                           Color="Color.Error" OnClick="@(() => ConfirmDelete(context.Item.Id))"/>
                                        </MudTooltip>
                                    }
                                </div>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <ChildRowContent>
                        <MudGrid Class="px-2 py-1">
                            @foreach (var field in GetChildRowFields(context.Item))
                            {
                                <MudItem Style="width:auto; white-space:nowrap;">
                                    <MudText Class="fw-bold text-primary" Style="font-weight:bold;">@field.Label:</MudText>
                                </MudItem>
                                <MudItem Class="flex-grow-1">
                                    <MudText>@field.Value</MudText>
                                </MudItem>
                            }
                        </MudGrid>
                    </ChildRowContent>
                    <PagerContent>
                        <div class="d-flex gap-2 align-center">
                            <MudTooltip Text="Reset Grid State">
                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Restore" OnClick="ResetGrid" />
                            </MudTooltip>
                            <MudText Typo="Typo.body2">Total: @(_eventsList?.Count() ?? 0) events</MudText>
                            <MudSpacer />
                            <MudDataGridPager T="vwEvent" PageSizeOptions="new int[]{10,25,50,100}" />
                        </div>
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

<!-- Terminal Availability Overlay -->
<MudOverlay @bind-Visible="_isTerminalAvailabilityFormVisible" DarkBackground="true" AutoClose="false">
    <MudPaper Class="mx-auto pa-6" Style="max-width:1200px; width:90%;" Elevation="4">
        <TerminalAvailabilityForm Entity="_availability" OnQuery="HandleQuery" OnCancel="HandleCancelQuery" />
    </MudPaper>
</MudOverlay>

<!-- Edit Event Overlay -->
<MudOverlay @bind-Visible="_isEditFormVisible" DarkBackground="true" AutoClose="false">
    <EventForm Event="_event" IsEditMode="_isEditMode"
               OnSubmit="HandleSaveEditChanges" OnCancel="HandleCancelEditChanges" />
</MudOverlay>

<!-- Add Event Overlay -->
<MudOverlay @bind-Visible="_isAddFormVisible" DarkBackground="true" AutoClose="false">
    <EventForm Event="_event" IsEditMode="_isEditMode"
               OnSubmit="HandleSaveNewEvent" OnCancel="HandleCancelNewEvent" />
</MudOverlay>

@code {
    #region Private Members
    private IEnumerable<vwEvent>? _eventsList;
    private bool _isLoading = true;
    private bool _isEditFormVisible;
    private bool _isAddFormVisible;
    private bool _isTerminalAvailabilityFormVisible;
    private bool _showArchivedEvents;
    private NoqEvent _event = new();
    private string? _searchString;
    private TerminalAvailabilityParameters _availability = new()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddDays(30),
        TotalTerminals = 300
    };
    private bool _isEditMode;
    private MudDataGrid<vwEvent>? _dataGrid;
    #endregion

    #region Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            ConfigureSnackbar();
            // Preload data if necessary
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load data. Please try refreshing the page.", Severity.Error);
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
    #endregion

    #region Snackbar Configuration
    private void ConfigureSnackbar()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.VisibleStateDuration = 5000;
        Snackbar.Configuration.ShowTransitionDuration = 300;
        Snackbar.Configuration.HideTransitionDuration = 300;
        Snackbar.Configuration.MaxDisplayedSnackbars = 3;
    }
    #endregion

    #region Edit Event Methods
    private async Task EditEvent(int id)
    {
        try
        {
            _isLoading = true;
            _event = (await EventsService.GetEventByIdAsync(id)) ?? new NoqEvent();
            _isEditMode = true;
            _isEditFormVisible = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Unable to load event for editing. Please try again.", Severity.Error);
            Console.WriteLine($"Error editing event: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleSaveEditChanges()
    {
        try
        {
            _isLoading = true;
            await EventsService.UpdateEventAsync(_event.Id, _event);
            await _dataGrid!.ReloadServerData();
            _isEditFormVisible = false;
            Snackbar.Add("Event updated successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to update event. Please try again.", Severity.Error);
            Console.WriteLine($"Error saving changes: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void HandleCancelEditChanges()
    {
        _isEditFormVisible = false;
        Snackbar.Add("Edit canceled", Severity.Info);
    }
    #endregion

    #region Terminal Availability Methods
    private void ShowTerminalAvailabilityForm() => _isTerminalAvailabilityFormVisible = true;

    private async Task HandleQuery()
    {
        try
        {
            _isLoading = true;
            _availability.DailyTerminalAvailability = await EventsService.GetDailyTerminalAvailabilitiesBetweenDatesAsync(
                _availability.StartDate,
                _availability.EndDate,
                _availability.TotalTerminals);
            Snackbar.Add("Terminal availability data loaded successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to query terminal availability. Please try again.", Severity.Error);
            Console.WriteLine($"Error querying availability: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void HandleCancelQuery() => _isTerminalAvailabilityFormVisible = false;
    #endregion

    #region Add Event Methods
    private void ShowAddEventForm()
    {
        _event = new NoqEvent
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1),
            ExpectedReturnDate = DateTime.Today.AddDays(2)
        };
        _isEditMode = false;
        _isAddFormVisible = true;
    }

    private async Task HandleSaveNewEvent()
    {
        try
        {
            _isLoading = true;
            _event.IsArchived = false;
            await EventsService.AddEventAsync(_event);
            await _dataGrid!.ReloadServerData();
            _isAddFormVisible = false;
            Snackbar.Add("New event added successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to add new event. Please try again.", Severity.Error);
            Console.WriteLine($"Error adding new event: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void HandleCancelNewEvent()
    {
        _isAddFormVisible = false;
        Snackbar.Add("New event creation canceled", Severity.Info);
    }
    #endregion

    #region Archive and Delete Methods
    private async Task ArchiveEvent(int itemId)
    {
        try
        {
            _isLoading = true;
            await EventsService.ArchiveEventAsync(itemId, !_showArchivedEvents);
            await _dataGrid!.ReloadServerData();
            string action = _showArchivedEvents ? "un-archived" : "archived";
            Snackbar.Add($"Event {action} successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            string action = _showArchivedEvents ? "un-archive" : "archive";
            Snackbar.Add($"Failed to {action} event. Please try again.", Severity.Error);
            Console.WriteLine($"Error archiving event: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ConfirmArchive(int itemId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", _showArchivedEvents ? "Are you sure you want to un-archive this event?" : "Are you sure you want to archive this event?" },
            { "ButtonText", _showArchivedEvents ? "Un-Archive" : "Archive" },
            { "CancelText", "Cancel" }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(
            _showArchivedEvents ? "Confirm Un-Archive" : "Confirm Archive",
            parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ArchiveEvent(itemId);
        }
    }

    private async Task DeleteEvent(int itemId)
    {
        try
        {
            _isLoading = true;
            await EventsService.DeleteEventAsync(itemId);
            await _dataGrid!.ReloadServerData();
            Snackbar.Add("Event permanently deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to delete event. Please try again.", Severity.Error);
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ConfirmDelete(int itemId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to permanently delete this event? This action cannot be undone." },
            { "ButtonText", "Delete Event" },
            { "CancelText", "Cancel" }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await DeleteEvent(itemId);
        }
    }
    #endregion

    #region Helper Methods
    private async Task FilterEventsByArchiveStatus(bool archiveStatus)
    {
        try
        {
            _isLoading = true;
            _showArchivedEvents = archiveStatus;
            await _dataGrid!.ReloadServerData();
            Snackbar.Add(_showArchivedEvents ? "Showing archived events" : "Showing active events", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to filter events. Please try again.", Severity.Error);
            Console.WriteLine($"Error filtering events: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ResetGrid()
    {
        if (_dataGrid != null)
        {
            await _dataGrid.ClearFiltersAsync();
            foreach (var property in typeof(vwEvent).GetProperties())
            {
                await _dataGrid.RemoveSortAsync(property.Name);
            }
            Snackbar.Add("Grid filters have been reset", Severity.Info);
        }
    }
    #endregion

    private Task OnSearch(string search)
    {
        _searchString = search;
        return _dataGrid!.ReloadServerData();
    }

    private async Task<GridData<vwEvent>> ServerReload(GridState<vwEvent> state)
    {
        _eventsList = await EventsService.GetAllEventsAsync(_showArchivedEvents);
        if (!string.IsNullOrEmpty(_searchString) && _eventsList != null)
        {
            _eventsList = _eventsList.Where(ev =>
                (!string.IsNullOrEmpty(ev.Deal_Name) && ev.Deal_Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(ev.Event_Name) && ev.Event_Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
        var sortedItems = _eventsList;
        if (state.SortDefinitions.Any())
        {
            var sortDefinition = state.SortDefinitions.First();
            var propertyInfo = typeof(vwEvent).GetProperty(sortDefinition.SortBy);
            if (propertyInfo != null)
            {
                sortedItems = sortDefinition.Descending
                    ? _eventsList.OrderByDescending(e => propertyInfo.GetValue(e, null)).ToList()
                    : _eventsList.OrderBy(e => propertyInfo.GetValue(e, null)).ToList();
            }
        }
        var totalItems = sortedItems?.Count() ?? 0;
        var pagedItems = sortedItems?.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList() ?? new List<vwEvent>();
        return new GridData<vwEvent> { TotalItems = totalItems, Items = pagedItems };
    }

    private IEnumerable<(string Label, object? Value)> GetChildRowFields(vwEvent item)
    {
        return new (string Label, object? Value)[]
        {
            ("Country", item.Country),
            ("Type of Operator", item.Operator_Type),
            ("Operator Name", item.Operator_Name),
            ("Month", item.Month),
            ("Year", item.Start_Date?.ToString("yyyy"))
        };
    }
}
