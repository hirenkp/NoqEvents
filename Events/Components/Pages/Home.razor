@page "/"

@inject EventsService _eventsService
@inject IDialogService _dialogService

<div style="width: 100vw; margin: 0; padding: 0;">
    <MudPaper Class="pa-6" Style="width: 100vw; margin: 0;" Elevation="4">
        <MudGrid Spacing="4" Style="width: 100%;">
            <!-- Page Header -->
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Class="mb-4">Event Dashboard</MudText>
            </MudItem>

            <!-- Action Buttons -->
            <MudItem xs="12" Class="d-flex justify-content-between">
                <MudButton Class="mx-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="@ShowTerminalAvailabilityForm">
                    Check Terminal Availability
                </MudButton>
                <MudButton Class="mx-2" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ShowAddEventForm">
                    Add New Event
                </MudButton>
                <MudCheckBox T="bool" bind-Value="@_showArchivedEvents" Label="Show Archived Events" ValueChanged="@(value => FilterEventsByArchiveStatus(value))"></MudCheckBox>
            </MudItem>

            <!-- Data Grid -->
            <MudItem xs="12">
                <MudDataGrid @ref="_dataGrid" T="VwEvent" Items="@_eventsList" ReadOnly="true"
                             Bordered="true" Dense="true" Striped="true" Hover="true"
                             Filterable="true" Groupable="true" FixedFooter="true" FixedHeader="true" >
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Hidden="true"/>
                        <PropertyColumn Property="x => x.Reference"/>
                        <PropertyColumn Property="x => x.DealName" Title="Deal Name"/>
                        <PropertyColumn Property="x => x.Event"/>
                        <PropertyColumn Property="x => x.Region"/>
                        <PropertyColumn Property="x => x.Country"/>
                        <PropertyColumn Property="x => x.TypeOfOperator" Title="Type of Operator"/>
                        <PropertyColumn Property="x => x.OperatorName" Title="Operator Name"/>
                        <PropertyColumn Property="x => x.DealStatus" Title="Deal Status"/>
                        <PropertyColumn Property="x => x.StartDate" Title="Start Date" Format="dd/MM/yyyy"/>
                        <PropertyColumn Property="x => x.EndDate" Title="End Date" Format="dd/MM/yyyy"/>
                        <PropertyColumn Property="x => x.ExpectedReturnDate" Title="Expected Return Date" Format="dd/MM/yyyy"/>
                        <PropertyColumn Property="x => x.ExpectedTerminals" Title="Expected Terminals"/>
                        <PropertyColumn Property="x => x.ConfirmedTerminals" Title="Confirmed Terminals"/>
                        <PropertyColumn Property="x => x.Days" Editable="false"/>
                        <PropertyColumn Property="x => x.Month" Editable="false"/>
                        <PropertyColumn Property="x => x.StartDate" Title="Year" Format="yyyy" Editable="false"/>
                        @* <TemplateColumn Title="Is Archived"> *@
                        @*     <CellTemplate> *@
                        @*         <MudCheckBox @bind-Checked="context.Item.IsArchived" Disabled="true" /> *@
                        @*     </CellTemplate> *@
                        @* </TemplateColumn> *@
                        <TemplateColumn>
                            <CellTemplate>
                                <div style="display: flex; gap: 4px;">
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit"
                                                       OnClick="@(() => EditEvent(context.Item.Id))"/>
                                    </MudTooltip>
                                    <MudTooltip Text="@(_showArchivedEvents == false ? "Archive" : "Un-Archive")">
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Archive"
                                                       OnClick="@(() => ConfirmArchive(context.Item.Id))"/>
                                    </MudTooltip>
                                    @if (_showArchivedEvents)
                                    {
                                        <MudTooltip Text="Delete Event">
                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete"
                                                           OnClick="@(() => ConfirmDelete(context.Item.Id))"/>
                                        </MudTooltip>
                                    }
                                </div>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <div style="display: flex; gap: 4px;">
                        <MudTooltip Text="Reset Grid State">
                            <MudIconButton Size="Size.Large" Icon="@Icons.Material.Outlined.Restore"
                                           OnClick="@ResetGrid"/>
                        </MudTooltip>
                        <MudDataGridPager T="VwEvent"/>
                        </div>
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>

<!-- Terminal Availability Overlay -->
<MudOverlay @bind-Visible="_isTerminalAvailabilityFormVisible" DarkBackground="true" AutoClose="false">
    <MudPaper Class="mx-auto pa-6" Style="max-width: 800px;" Elevation="4">
        <TerminalAvailabilityForm Entity="_availability" OnQuery="HandleQuery" OnCancel="HandleCancelQuery" />
    </MudPaper>
</MudOverlay>

<!-- Edit Event Overlay -->
<MudOverlay @bind-Visible="_isEditFormVisible" DarkBackground="true" AutoClose="false">
    <MudPaper Class="mx-auto pa-6" Style="max-width: 800px;" Elevation="4">
        <EventForm
            Event="@_event"
            CountryList="@_countryList"
            OperatorTypeList="@_operatorTypeList"
            OperatorList="@_operatorList"
            DealStatusList="@_dealStatusList"
            IsEditMode="@_isEditMode"
            OnSubmit="HandleSaveEditChanges"
            OnCancel="HandleCancelEditChanges" />
    </MudPaper>
</MudOverlay>

<!-- Add Event Overlay -->
<MudOverlay @bind-Visible="_isAddFormVisible" DarkBackground="true" AutoClose="false">
    <MudPaper Class="mx-auto pa-6" Style="max-width: 800px;" Elevation="4">
        <EventForm
            Event="@_event"
            CountryList="@_countryList"
            OperatorTypeList="@_operatorTypeList"
            OperatorList="@_operatorList"
            DealStatusList="@_dealStatusList"
            IsEditMode="@_isEditMode"
            OnSubmit="HandleSaveNewEvent"
            OnCancel="HandleCancelNewEvent" />
    </MudPaper>
 </MudOverlay>

@code {
    #region Member variables
    private IEnumerable<VwEvent>? _eventsList;

    private bool _isEditFormVisible;
    private bool _isTerminalAvailabilityFormVisible;
    private bool _isAddFormVisible;
    private bool _showArchivedEvents;
    
    private NoqEvent _event = null!; // currently selected event from data grid

    private IEnumerable<Country>? _countryList;
    private IEnumerable<DealStatus>? _dealStatusList;
    private IEnumerable<Operator>? _operatorList;
    private IEnumerable<OperatorType>? _operatorTypeList;
    
    private TerminalAvailabilityParameters _availability = new()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today,
        TotalTerminals = 300
    };

    private bool _isEditMode;
    private MudDataGrid<VwEvent>? _dataGrid;
    private List<IFilterDefinition<VwEvent>>? _filterDefinition;
    private Dictionary<string, SortDefinition<VwEvent>>? _sortDefinitions;

    #endregion
    
    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        _eventsList = await _eventsService.GetAllEventsAsync(_showArchivedEvents);
        _countryList = await _eventsService.GetAllCountriesAsync();
        _dealStatusList = await _eventsService.GetAllDealStatusesAsync();
        _operatorList = await _eventsService.GetAllOpearatorsAsync();
        _operatorTypeList = await _eventsService.GetAllOpearatorTypesAsync();

        _isEditFormVisible = false;

        _filterDefinition = _dataGrid!.FilterDefinitions;
        _sortDefinitions = _dataGrid!.SortDefinitions;
    }
    #endregion
    
    #region Edit Event Form Methods
    private async Task EditEvent(int id)
    {
        _event = (await _eventsService.GetEventByIdAsync(id))!;
        _isEditMode = true;
        _isEditFormVisible = true;
    }

    private async Task HandleSaveEditChanges()
    {
        VwEvent vwEvent = _eventsList!.FirstOrDefault(e => e.Id == _event.Id)!;
        vwEvent!.Event = _event.Event1;
        vwEvent.Country = _countryList!.FirstOrDefault(c => c.Id == _event.CountryId)?.Country1 ?? string.Empty;
        vwEvent.Reference = _event.Reference;
        vwEvent.DealName = _event.DealName;
        vwEvent.Region = _countryList!.FirstOrDefault(c => c.Id == _event.CountryId)?.CountryCode ?? string.Empty;
        vwEvent.TypeOfOperator = _operatorTypeList!.FirstOrDefault(ot => ot.Id == _event.OperatorTypeId)?.Type ?? string.Empty;
        vwEvent.OperatorName = _operatorList!.FirstOrDefault(o => o.Id == _event.OperatorId)?.Name ?? string.Empty;
        vwEvent.DealStatus = _dealStatusList!.FirstOrDefault(ds => ds.Id == _event.DealStatusId)?.Status ?? string.Empty;
        vwEvent.StartDate = _event.StartDate;
        vwEvent.EndDate = _event.EndDate;
        vwEvent.ExpectedReturnDate = _event.ExpectedReturnDate;
        vwEvent.ExpectedTerminals = _event.ExpectedTerminals;
        vwEvent.ConfirmedTerminals = _event.ConfirmedTerminals;
        vwEvent.Days = (_event!.EndDate!.Value - _event!.StartDate!.Value).Days + 1;
        vwEvent.Month = _event!.StartDate.Value.ToString("MMMM");

        await _eventsService.UpdateEventAsync(_event.Id, _event);
        _isEditFormVisible = false;
    }
    
    private void HandleCancelEditChanges()
    {
        _isEditFormVisible = false;
    }
    #endregion
    
    #region Query Availability Methods
    void ShowTerminalAvailabilityForm()
    {
        _isTerminalAvailabilityFormVisible = true;
    }

    private async Task HandleQuery()
    {
        _availability.DailyTerminalAvailability = await _eventsService.GetDailyTerminalAvailabilitiesBetweenDatesAsync(_availability.StartDate, _availability.EndDate, _availability.TotalTerminals);
    }

    private void HandleCancelQuery()
    {
        _isTerminalAvailabilityFormVisible = false;
    }
    #endregion

    #region Add Form Methods
    private void ShowAddEventForm()
    {
        _event = new();
        _isEditMode = false;
        _isAddFormVisible = true;
    }

    private async Task HandleSaveNewEvent()
    {
        _event.IsArchived = false;
        await _eventsService.AddEventAsync(_event);

        if (!_showArchivedEvents)
        {
            VwEvent vwEvent = new()
            {
                Event = _event.Event1,
                Country = _countryList!.FirstOrDefault(c => c.Id == _event.CountryId)?.Country1 ?? string.Empty,
                Reference = _event.Reference,
                DealName = _event.DealName,
                Region = _countryList!.FirstOrDefault(c => c.Id == _event.CountryId)?.CountryCode ?? string.Empty,
                TypeOfOperator = _operatorTypeList!.FirstOrDefault(ot => ot.Id == _event.OperatorTypeId)?.Type ?? string.Empty,
                OperatorName = _operatorList!.FirstOrDefault(o => o.Id == _event.OperatorId)?.Name ?? string.Empty,
                DealStatus = _dealStatusList!.FirstOrDefault(ds => ds.Id == _event.DealStatusId)?.Status ?? string.Empty,
                StartDate = _event.StartDate,
                EndDate = _event.EndDate,
                ExpectedReturnDate = _event.ExpectedReturnDate,
                ExpectedTerminals = _event.ExpectedTerminals,
                ConfirmedTerminals = _event.ConfirmedTerminals,
                Days = (_event!.EndDate!.Value - _event!.StartDate!.Value).Days + 1,
                Month = _event!.StartDate.Value.ToString("MMMM"),
                IsArchived = _event.IsArchived
            };

            List<VwEvent> eventsList = _eventsList!.ToList();
            eventsList.Add(vwEvent);
            _eventsList = eventsList;
        }

        _isAddFormVisible = false;
    }

    private void HandleCancelNewEvent()
    {
        _isAddFormVisible = false;
    }
    #endregion

    private async Task ArchiveEvent(int itemId)
    {
        var index = _eventsList!.ToList<VwEvent>().FindIndex(e => e.Id == itemId)!;
        var eventList = _eventsList!.ToList();
        eventList.RemoveAt(index);
        _eventsList = eventList;
        await _eventsService.ArchiveEventAsync(itemId, !_showArchivedEvents);
    }
    
    // Your custom filter function uses the nameFilter value.
    // private bool IsArchiveFilter(VwEvent item, object? filterValue)
    // {
    //     // If no filter is set, show all items.
    //     if (filterValue == null)
    //         return true;
    //
    //     // If a filter is provided, compare the boolean values.
    //     if (filterValue is bool filterBool)
    //         return item.IsArchived == filterBool;
    //
    //     return true;
    // }

    private async Task ConfirmArchive(int itemId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", _showArchivedEvents == false ? "Are you sure you want to archive this item?" : "Confirm you wish to un-archive event" },
            { "ButtonText", _showArchivedEvents == false ? "Archive" : "Un-Archive" },
            { "CancelText", "Cancel" }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        
        var dialog = await _dialogService!.ShowAsync<ConfirmationDialog>(_showArchivedEvents == false ? "Confirm Archive" : "Confirm Un-Archive", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await ArchiveEvent(itemId);
        }
    }

    private async Task FilterEventsByArchiveStatus(bool archiveStatus)
    {
        _showArchivedEvents = archiveStatus;
        _eventsList = await _eventsService.GetAllEventsAsync(_showArchivedEvents);
    }

    private async Task ResetGrid()
    {
        await _dataGrid!.ClearFiltersAsync();
    }

    private async Task ConfirmDelete(int itemId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this item?" },
            { "ButtonText", "Delete Event" },
            { "CancelText", "Cancel" }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        
        var dialog = await _dialogService!.ShowAsync<ConfirmationDialog>(_showArchivedEvents == false ? "Confirm Delete" : "Confirm Un-Archive", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            var index = _eventsList!.ToList<VwEvent>().FindIndex(e => e.Id == itemId)!;
            var eventList = _eventsList!.ToList();
            eventList.RemoveAt(index);
            _eventsList = eventList;
            await _eventsService.DeleteEventAsync(itemId);
        }
    }

}
